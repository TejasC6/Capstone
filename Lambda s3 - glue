import json
import boto3
statusCode = 0
def lambda_handler(event, context):
    # TODO implement
    client = boto3.client('glue')
    client.start_job_run(
        JobName = '<your_glue_job_name>',
        Arguments = {}
        )
    print('Lambda Invoked')
    
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
topic_arn = "<your_sns_topic_link>"
def send_sns(message, subject):
    try:
        client = boto3.client("sns")
        result = client.publish(TopicArn=topic_arn, Message=message, Subject=subject)
        if result['ResponseMetadata']['HTTPStatusCode'] == 200:
            print(result)
            print("Notification send successfully..!!!")
            return True
    except Exception as e:
        print("Error occured while publish notifications and error is : ", e)
        return True

def lambda_handler(event, context):
    print("event collected is {}".format(event))
    for record in event['Records'] :
        s3_bucket = record['s3']['bucket']['name']
        print("Bucket name is {}".format(s3_bucket))
        s3_key = record['s3']['object']['key']
        print("Bucket key name is {}".format(s3_key))
        from_path = "s3://{}/{}".format(s3_bucket, s3_key)
        print("from path {}".format(from_path))
        if(statusCode==200):
            message = "The file is uploaded at S3 bucket path {}".format(from_path)
            subject = "Processes completion Notification"
        else:
            message = "The file is uploaded at S3 bucket path {} but not processed".format(from_path)
            subject = "Processes incompletion Notification"
        SNSResult = send_sns(message, subject)
        if SNSResult :
            print("Notification Sent..") 
            return SNSResult
        else:
            return False
